[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
set background=dark
autocmd VimEnter * ++nested colorscheme hybrid
'''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_event = 'InsertCharPre'
# hook_source = '''
# let g:deoplete#enable_at_startup = v:true
# 
# " Enterで候補を確定できるようにする
# " inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
# " function! s:my_cr_function() abort
# "     return deoplete#close_popup() . "\<CR>"
# " endfunction
# '''

# [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_source = '''
# let g:neosnippet#snippets_directory = '~/.vim/snippets'
# 
# " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
# imap <C-k>     <Plug>(neosnippet_jump_or_expand)
# smap <C-k>     <Plug>(neosnippet_jump_or_expand)
# xmap <C-k>     <Plug>(neosnippet_expand_target)
# 
# " SuperTab like snippets behavior.
# " TABで補完候補とneosnippetの展開の両方をする設定
# " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
# imap <expr><TAB>
# \ pumvisible() ? "\<C-n>" :
# \ neosnippet#expandable_or_jumpable() ?
# \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
# smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#  "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
# 
# " Expand the completed snippet trigger by <CR>.
# imap <expr><CR>
# \ (pumvisible() && neosnippet#expandable()) ?
# \ "\<Plug>(neosnippet_expand)" : "\<CR>"
# 
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = '''
# function! s:on_lsp_buffer_enabled() abort
#     setlocal omnifunc=lsp#complete
#     setlocal signcolumn=yes
#     if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
#     nmap <buffer> gd <plug>(lsp-definition)
#     nmap <buffer> gr <plug>(lsp-references)
#     nmap <buffer> gi <plug>(lsp-implementation)
#     nmap <buffer> gt <plug>(lsp-type-definition)
#     nmap <buffer> <leader>rn <plug>(lsp-rename)
#     nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
#     nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
#     nmap <buffer> K <plug>(lsp-hover)
# 
#     let g:lsp_diagnostics_enabled = 0
#     let g:lsp_signs_enabled = 1
#     let g:lsp_diagnostics_echo_cursor = 1
#     let g:lsp_format_sync_timeout = 1000
#     " autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
# 
#     " refer to doc to add more commands
# endfunction
# 
# augroup lsp_install
#     au!
#     " call s:on_lsp_buffer_enabled only for languages that has the server registered.
#     autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
# augroup END
# '''

# [[plugins]]
# repo = 'mattn/vim-lsp-settings'
# depends = ['vim-lsp']


[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python', 'python3', 'snakemake']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']

[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['ansible', 'yaml']

[[plugins]]
repo = 'ShaiberAlon/snakemake-vim'
on_ft = ['snakemake']

